<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>西土城马戏团</title>
  <icon>https://www.gravatar.com/avatar/cdcac963e087f7ecf2e4d43707a2fbd4</icon>
  <subtitle>Keep Listening Keep Thinking</subtitle>
  <link href="https://xiaoysec.github.io/atom.xml" rel="self"/>
  
  <link href="https://xiaoysec.github.io/"/>
  <updated>2023-02-20T07:14:27.690Z</updated>
  <id>https://xiaoysec.github.io/</id>
  
  <author>
    <name>xiaoysec</name>
    <email>xiaoysec@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>语雀文章同步Hexo</title>
    <link href="https://xiaoysec.github.io/2023/02/20/%E8%AF%AD%E9%9B%80%E6%96%87%E7%AB%A0%E5%90%8C%E6%AD%A5Hexo/"/>
    <id>https://xiaoysec.github.io/2023/02/20/%E8%AF%AD%E9%9B%80%E6%96%87%E7%AB%A0%E5%90%8C%E6%AD%A5Hexo/</id>
    <published>2023-02-20T05:34:21.000Z</published>
    <updated>2023-02-20T07:14:27.690Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>搭建好 Hexo 博客环境</p><h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><p>插件源码地址 <a href="https://github.com/x-cold/yuque-hexo" target="_blank" rel="noopener">https://github.com/x-cold/yuque-hexo</a></p><ol><li>安装 npm install -g yuque-hexo –save</li><li>配置 修改博客根目录下的 package.json 文件<br><img src="https://cdn.nlark.com/yuque/0/2023/png/21378486/1676874621109-8f996193-5bfd-4f00-8dd9-f5ecf5416169.png#averageHue=%23090909&clientId=u3d67214b-d36f-4&from=paste&height=105&id=u123018f6&name=image.png&originHeight=210&originWidth=1070&originalType=binary%E2%88%B6=2&rotation=0&showTitle=false&size=32536&status=done&style=none&taskId=ua317f3fa-ca06-41ad-9117-1fd38ceb8c6&title=&width=535" alt="image.png"></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">"yuqueConfig": &#123;</span><br><span class="line">  "postPath": "source/_posts",</span><br><span class="line">  "cachePath": "yuque.json",</span><br><span class="line">  "mdNameFormat": "slug",</span><br><span class="line">  "adapter": "hexo",</span><br><span class="line">  "concurrency": 5,</span><br><span class="line">  "baseUrl": "https://www.yuque.com/api/v2",</span><br><span class="line">  "login": "xituchengxiaoyang",</span><br><span class="line">  "repo": "blog",</span><br><span class="line">  "token": "语雀token",</span><br><span class="line">  "onlyPublished": true,</span><br><span class="line">  "onlyPublic": true</span><br><span class="line">&#125;,</span><br><span class="line">"devDependencies": &#123;</span><br><span class="line">  "yuque-hexo": "^1.6.0"</span><br><span class="line">&#125;,</span><br><span class="line">"hexo": &#123;</span><br><span class="line">  "version": "4.2.1"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>参数解释</p><table><thead><tr><th>参数名</th><th>含义</th><th>默认值</th></tr></thead><tbody><tr><td>postPath</td><td>文档同步后生成的路径</td><td>source&#x2F;_posts&#x2F;yuque</td></tr><tr><td>cachePath</td><td>文档下载缓存文件</td><td>yuque.json</td></tr><tr><td>mdNameFormat</td><td>文件名命名方式 (title &#x2F; slug)</td><td>title</td></tr><tr><td>adapter</td><td>文档生成格式 (hexo&#x2F;markdown)</td><td>hexo</td></tr><tr><td>concurrency</td><td>下载文章并发数</td><td>5</td></tr><tr><td>baseUrl</td><td>语雀 API 地址</td><td>-</td></tr><tr><td>login</td><td>语雀 login (group), 也称为个人路径</td><td>-</td></tr><tr><td>repo</td><td>语雀仓库短名称，也称为语雀知识库路径</td><td>-</td></tr><tr><td>onlyPublished</td><td>只展示已经发布的文章</td><td>false</td></tr><tr><td>onlyPublic</td><td>只展示公开文章</td><td>false</td></tr></tbody></table><p>baseUrl 是固定的照抄就行，mdNameFormat 建议使用 title，repo 信息在这边看</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.nlark.com/yuque/0/2023/png/21378486/1676875159904-e9d7fdf4-9a89-4d57-ac76-60362a86b096.png#averageHue=%23fbfbfb&clientId=u3d67214b-d36f-4&from=paste&height=641&id=u4862af86&name=image.png&originHeight=1282&originWidth=2296&originalType=binary∶=2&rotation=0&showTitle=false&size=321115&status=done&style=none&taskId=udadd88eb-b4ac-4b65-9916-097022a214d&title=&width=1148" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>Token 需要设置一下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.nlark.com/yuque/0/2023/png/21378486/1676875401551-a93c9e95-10e0-429d-8056-532c563e795f.png#averageHue=%23fcfcfc&clientId=u3d67214b-d36f-4&from=paste&height=661&id=uccba237f&name=image.png&originHeight=1322&originWidth=2552&originalType=binary∶=2&rotation=0&showTitle=false&size=208043&status=done&style=none&taskId=ued5bd6e5-5f1f-4245-b607-a25be4ebf5b&title=&width=1276" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ol start="3"><li>在 package.json 中配置 scripts</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加以下命令行</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sync"</span>: <span class="string">"yuque-hexo sync"</span>,</span><br><span class="line">  <span class="attr">"clean:yuque"</span>: <span class="string">"yuque-hexo clean"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的 package.json 文件如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hexo-site"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"hexo generate"</span>,</span><br><span class="line">    <span class="attr">"clean"</span>: <span class="string">"hexo clean"</span>,</span><br><span class="line">    <span class="attr">"deploy"</span>: <span class="string">"hexo deploy"</span>,</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"hexo server"</span>,</span><br><span class="line">    <span class="attr">"sync"</span>: <span class="string">"yuque-hexo sync"</span>,</span><br><span class="line">    <span class="attr">"clean:yuque"</span>: <span class="string">"yuque-hexo clean"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hexo"</span>: &#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"4.2.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"hexo"</span>: <span class="string">"^4.2.1"</span>,</span><br><span class="line">    <span class="attr">"hexo-deployer-git"</span>: <span class="string">"^4.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-archive"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-category"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-feed"</span>: <span class="string">"^3.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-index"</span>: <span class="string">"^3.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-json-content"</span>: <span class="string">"^4.2.3"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-tag"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-helper-qrcode"</span>: <span class="string">"^1.0.2"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-ejs"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-less"</span>: <span class="string">"^4.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-marked"</span>: <span class="string">"^6.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-stylus"</span>: <span class="string">"^2.1.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-server"</span>: <span class="string">"^3.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-theme-landscape"</span>: <span class="string">"^0.0.3"</span>,</span><br><span class="line">    <span class="attr">"yuque-hexo"</span>: <span class="string">"^1.9.5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"yuque-hexo"</span>: <span class="string">"^1.9.5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"yuqueConfig"</span>: &#123;</span><br><span class="line">    <span class="attr">"postPath"</span>: <span class="string">"source/_posts/yuque"</span>,</span><br><span class="line">    <span class="attr">"cachePath"</span>: <span class="string">"yuque.json"</span>,</span><br><span class="line">    <span class="attr">"mdNameFormat"</span>: <span class="string">"title"</span>,</span><br><span class="line">    <span class="attr">"adapter"</span>: <span class="string">"hexo"</span>,</span><br><span class="line">    <span class="attr">"concurrency"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"https://www.yuque.com/api/v2"</span>,</span><br><span class="line">    <span class="attr">"login"</span>: <span class="string">"XXXXX"</span>, <span class="comment">//你自己的用户名</span></span><br><span class="line">    <span class="attr">"repo"</span>: <span class="string">"XXXX"</span>, <span class="comment">//你自己的仓库名</span></span><br><span class="line">    <span class="attr">"token"</span>: <span class="string">"XXXXX"</span>, <span class="comment">//你自己的token</span></span><br><span class="line">    <span class="attr">"onlyPublished"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"onlyPublic"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>同步命令</li></ol><p>yuque-hexo sync 同步<br>yuque-hexo clean 清楚本地缓存</p><h3 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h3><ol><li>语雀图片无法正常显示</li></ol><p>因为语雀图片防盗链机制，图片无法正常显示，需要对主题下的文件做一点修改如我使用的 indigo，需要修改 themes&#x2F;indigo&#x2F;layout&#x2F;_partial&#x2F;head.ejs ，添加如下的源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"referrer"</span> <span class="attr">content</span>=<span class="string">"no-referrer"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>部署出错，kex_exchange_identification: Connection closed by remote</li></ol><p>github 22 端口 timeout,直接使用 443 端口解决，在**~&#x2F;.ssh&#x2F;config **文件中添加如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Host</span> <span class="string">github.com</span></span><br><span class="line"><span class="string">HostName</span> <span class="string">ssh.github.com</span></span><br><span class="line"><span class="string">User</span> <span class="string">git</span></span><br><span class="line"><span class="string">Port</span> <span class="number">443</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在命令行工具中使用代理</li></ol><p>在.zshrc 或者.bash_profile 中添加如下命令，后重新加载环境变量，需要使用到梯子只需要先执行 on_proxy</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function on_proxy() &#123;</span><br><span class="line">    export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"</span><br><span class="line">    export http_proxy="http://127.0.0.1:9850"</span><br><span class="line">    export https_proxy=$http_proxy</span><br><span class="line">    export all_proxy=socks5://127.0.0.1:9850</span><br><span class="line">    echo -e "\n"</span><br><span class="line">    echo -e "proxy is on"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function off_proxy()&#123;</span><br><span class="line">    unset http_proxy</span><br><span class="line">    unset https_proxy</span><br><span class="line">    unset all_proxy</span><br><span class="line">    echo -e "proxy is off"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mac 下查看 clash 中的代理信息如下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.nlark.com/yuque/0/2023/png/21378486/1676876622078-72fba422-ba11-4928-ae6c-e8aff2aa7479.png#averageHue=%23d0ccd5&clientId=u3d67214b-d36f-4&from=paste&height=637&id=ub36f6bc5&name=image.png&originHeight=1274&originWidth=680&originalType=binary∶=2&rotation=0&showTitle=false&size=300473&status=done&style=none&taskId=ub7c0ae0e-240b-4119-9996-c5a5d99dd8e&title=&width=340" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>不要使用 ping <a href="http://www.google.com来进行测试,因为ping命令使用的是icmp协议,是不支持代理的./" target="_blank" rel="noopener">www.google.com来进行测试，因为ping命令使用的是ICMP协议，是不支持代理的。</a></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>[1] <a href="http://www.manongjc.com/detail/61-xmojtxvddsuftbg.html" target="_blank" rel="noopener">http://www.manongjc.com/detail/61-xmojtxvddsuftbg.html</a><br>[2] <a href="https://cloud.tencent.com/developer/article/2114329" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/2114329</a><br>[3] <a href="https://cloud.tencent.com/developer/article/2168702" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/2168702</a><br>[4] <a href="https://zhuanlan.zhihu.com/p/577256660" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/577256660</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h3&gt;&lt;p&gt;搭建好 Hexo 博客环境&lt;/p&gt;
&lt;h3 id=&quot;配置步骤&quot;&gt;&lt;a href=&quot;#配置步骤&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="效率工具" scheme="https://xiaoysec.github.io/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="效率工具" scheme="https://xiaoysec.github.io/tags/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Hexo" scheme="https://xiaoysec.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>召回系统在海拍客的实践</title>
    <link href="https://xiaoysec.github.io/2023/02/20/%E5%8F%AC%E5%9B%9E%E7%B3%BB%E7%BB%9F%E5%9C%A8%E6%B5%B7%E6%8B%8D%E5%AE%A2%E7%9A%84%E5%AE%9E%E8%B7%B5/"/>
    <id>https://xiaoysec.github.io/2023/02/20/%E5%8F%AC%E5%9B%9E%E7%B3%BB%E7%BB%9F%E5%9C%A8%E6%B5%B7%E6%8B%8D%E5%AE%A2%E7%9A%84%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-02-20T01:51:17.000Z</published>
    <updated>2023-02-20T06:01:37.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>推荐系统通常可以分为召回、粗排、精排、重排四个阶段，召回主要是根据不同策略或模型从海量的物品库中快速筛选出一小部分用户可能感兴趣的物品，交由排序模型来精准地完成个性化排序，本文主要阐述召回在算法侧的工作原理以及召回系统工程侧落地实践。</p><h2 id="召回算法"><a href="#召回算法" class="headerlink" title="召回算法"></a>召回算法</h2><p>目前算法团队在使用传统算法如 ItemCF、Swing 的基础上，也在不断尝试在召回中应用深度模型，下面章节介绍目前算法团队使用到的几种典型召回算法原理，实际的模型会更复杂但原理大同小异。</p><h3 id="协同过滤"><a href="#协同过滤" class="headerlink" title="协同过滤"></a>协同过滤</h3><p>作为在推荐系统召回中最基本的一种算法，系统过滤主要分为两大类</p><ul><li>基于用户的协同过滤算法(UserCF)</li><li>基于物品的协同过滤算法(ItemCF)</li></ul><h4 id="基于用户的协同过滤"><a href="#基于用户的协同过滤" class="headerlink" title="基于用户的协同过滤"></a>基于用户的协同过滤</h4><p>简单的说基于用户的协同过滤就是找到与你相似的用户，将相似用户交互过的商品推荐给你。基于用户的协同过滤核心在于计算用户的相似度，以一个简单的例子演示该算法<br>假设我们在做首页商品推荐，用户 A 点击的商品集合为 M，用户 B 点击的商品集合为 N,那么用户 A 和用户 B 的相似度可以通过如下公式计算</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.nlark.com/yuque/0/2022/png/21378486/1663661246248-85986dd7-4309-4967-99cf-35d5e6176a69.png#averageHue=%23fdfdfd&clientId=u1a865019-c4d9-4&errorMessage=unknown%20error&from=paste&height=49&id=ueb35208d&name=image.png&originHeight=98&originWidth=272&originalType=binary∶=1&rotation=0&showTitle=false&size=9084&status=error&style=none&taskId=u192932e0-fba6-420e-8366-5d97a611ba6&title=&width=136" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>如用户 A 点击过的商品集合 M &#x3D; {a,b,c,d} , 用户 B 点击过的商品集合 N&#x3D;{a,b,c,d,e,f} ，所以用户 A 和用户 B 的相似度为 2&#x2F;3，用户 C 点击过的商品集合为{a,b,c} ，用户 D 点击过的商品集合为{a,b}，此处我们人为定义相似度阈值为 0.5，那么与用户 A 相似的用户为用户 B 和用户 C，那么可以给用户 A 推荐商品{e,f}，给用户 C 推荐{d,e,f}。 这里只是展示了一种比较简单粗暴的方法，想要得到更好的推荐效果可以改进相似度的计算方法，这边不作深究。</p><h4 id="基于物品的协同过滤"><a href="#基于物品的协同过滤" class="headerlink" title="基于物品的协同过滤"></a>基于物品的协同过滤</h4><p>简单来说基于物品的协同过滤就是根据用户对商品的交互历史，推荐该商品相似的其他商品。基于物品的协同过滤同样需要计算物品的相似度，以一个简单的例子演示该算法<br>假设喜欢物品 a 的用户数量为 N(a)，喜欢物品 b 的用户数量为 N(b) ，那么物品 a 和物品 b 的相似度可以使用如下公式表示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.nlark.com/yuque/0/2022/png/21378486/1663667505148-32c438b9-7845-4444-9351-3e9ac0896f76.png#averageHue=%23fefefe&clientId=u1a865019-c4d9-4&errorMessage=unknown%20error&from=paste&height=59&id=ub9a38d6c&name=image.png&originHeight=118&originWidth=390&originalType=binary∶=1&rotation=0&showTitle=false&size=13912&status=error&style=none&taskId=u49f5aca7-ca73-499c-b3f0-7099c0a7568&title=&width=195" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>假设用户对商品的喜好如下表所示</p><table><thead><tr><th align="center"></th><th align="center">商品a</th><th align="center">商品 b</th><th align="center">商品 c</th><th align="center">商品 d</th></tr></thead><tbody><tr><td align="center">用户A</td><td align="center">✅</td><td align="center">✅</td><td align="center">✅</td><td align="center"></td></tr><tr><td align="center">用户B</td><td align="center"></td><td align="center">✅</td><td align="center">✅</td><td align="center">✅</td></tr><tr><td align="center">用户C</td><td align="center"></td><td align="center"></td><td align="center">✅</td><td align="center">✅</td></tr></tbody></table><p>那么根据上述的相似度计算公式可以得到<br>ab 相似度为 0.71 ，ac 相似度为 0.58，bc 相似度为 0.82，cd 相似度为 0.82<br>我们人为假定某个用户对商品 a 有购买行为兴趣度为 10，对 b 商品有点击行为兴趣度为 5，那么我们可以得到<br>该用户对商品 c 的兴趣度为 10 _ 0.58 + 5 _ 0.82 &#x3D; 9.9，对 d 的兴趣度为 0 ，因此可以给该用户推荐商品 c</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.nlark.com/yuque/0/2022/png/21378486/1663726380287-57ad71b7-e41c-407d-9120-99d8c0bfc103.png#averageHue=%23f6f3ef&clientId=u64af37cf-697d-4&errorMessage=unknown%20error&from=paste&height=223&id=uee120e73&name=image.png&originHeight=446&originWidth=620&originalType=binary∶=1&rotation=0&showTitle=false&size=50763&status=error&style=none&taskId=u5af0c956-3620-4954-9a70-cf735f11181&title=&width=310" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="双塔模型"><a href="#双塔模型" class="headerlink" title="双塔模型"></a>双塔模型</h3><p>双塔模型是一种在推荐领域召回、粗排阶段被广泛使用的深度学习模型，其结构非常简单如下图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.nlark.com/yuque/0/2022/png/21378486/1663728033308-8e8a6c79-9d07-4906-819d-4abd0e7edc07.png#averageHue=%23ebe7e6&clientId=u50249bee-aba3-4&errorMessage=unknown%20error&from=paste&height=286&id=u9c3ae0f5&name=image.png&originHeight=778&originWidth=1272&originalType=binary∶=1&rotation=0&showTitle=false&size=264570&status=error&style=none&taskId=u361b075d-ea1c-42c4-a621-1bda5372a6c&title=&width=468" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>左侧是 User 塔，右侧是 Item 塔，可将特征拆分为两大类：用户相关特征（用户基本信息、群体统计属性以及行为过的 Item 序列等）与 Item 相关特征（Item 基本信息、属性信息等），原则上，Context 上下文特征可以放入用户侧塔。对于这两个塔本身，则是经典的 DNN 模型，从特征 OneHot 到特征 Embedding，再经过几层 MLP 隐层，两个塔分别输出用户 Embedding 和 Item Embedding 编码。<br>训练阶段，User Embedding 和 Item Embedding 做内积或者 Cosine 相似度计算，使得用户和正例 Item 在 Embedding 空间更接近，和负例 Item 在 Embedding 空间距离拉远，损失函数则可用标准交叉熵损失。<br>在线服务阶段，对于海量的 Item 集合，可以通过 Item 侧塔，离线将所有 Item 转化成 Embedding，并存储进 ANN 检索系统如 Faiss 以供查询。当一个用户进行请求时，将用户最新行为过的 Item 作为用户侧塔的输入，然后通过用户侧塔打出 User Embedding，从 Faiss 库里拉取相似性得分 Top K 的 Item，做为个性化召回结果这种模式。这样也可以实时地体现用户即时兴趣的变化，这是特征实时的角度，做起来相对简单。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.nlark.com/yuque/0/2022/png/21378486/1663742524019-74c044e7-297f-4e4b-9a3f-f5d674f81416.png#averageHue=%23f8e1dc&clientId=u50249bee-aba3-4&errorMessage=unknown%20error&from=paste&height=302&id=ub3125e5f&name=image.png&originHeight=604&originWidth=1384&originalType=binary∶=1&rotation=0&showTitle=false&size=229557&status=error&style=none&taskId=ua67dd4fe-016d-4bae-8f34-c560488337f&title=&width=692" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h3><p>目前算法侧通过离线的方式训练召回数据，存储到对应的数据源中，工程侧需要通过召回配置完成多路召回-去重-过滤-融合的操作，将召回结果送到下一阶段进行个性化排序，对整个推荐链路而言，召回要求快，排序要求准，所以对召回系统的要求是稳定低延迟。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.nlark.com/yuque/0/2022/png/21378486/1663743688452-2b954c60-87eb-4756-a927-ca60d7a1b95b.png#averageHue=%23f9f8f7&clientId=u50249bee-aba3-4&errorMessage=unknown%20error&from=paste&height=300&id=uad622a3e&name=image.png&originHeight=600&originWidth=1050&originalType=binary∶=1&rotation=0&showTitle=false&size=139115&status=error&style=none&taskId=u7d6151f7-1802-4032-9a60-64e334ea57e&title=&width=525" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="召回工程"><a href="#召回工程" class="headerlink" title="召回工程"></a>召回工程</h2><p>海拍客推荐目前服务触达、首页、搜索激活页、支付成功页、 我的页面等多个场景，涵盖了购前、购中、购后等多个不同阶段。如上面所述，商品召回作为推荐的第一步在整个推荐流程中起到了举足轻重的作用，直接影响了返回物料的质量，而合理的召回工程架构也一定程度上影响业务和算法迭代的速度与质量。</p><h3 id="召回初代架构"><a href="#召回初代架构" class="headerlink" title="召回初代架构"></a>召回初代架构</h3><p>由于业务的特殊性以及诸多历史遗留问题，在之前海拍客的推荐架构中各业务系统需要各自完成商品召回，再按需调用精排服务完成商品排序等后续操作，召回数据源又各有不同，如触达业务使用了 MySQL 作为召回数据源，推荐业务使用了 Redis 作为主要的召回数据源，所涉及到的架构大致如下图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.nlark.com/yuque/0/2022/png/21378486/1663571312034-ded7f947-3754-486c-9a24-a0d2a402596f.png#averageHue=%23f6f0ea&clientId=u316e915d-4b09-4&errorMessage=unknown%20error&from=paste&height=249&id=u4f5cc20a&name=image.png&originHeight=498&originWidth=1078&originalType=binary∶=1&rotation=0&showTitle=false&size=71706&status=error&style=none&taskId=ueaa4c8f2-a1b7-4b42-8949-8a66b56fdc7&title=&width=539" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h4 id="架构局限性"><a href="#架构局限性" class="headerlink" title="架构局限性"></a>架构局限性</h4><p>这种架构在业务的迭代中也逐渐出现各种弊端</p><ul><li>职责不清晰， 从整个推荐域看，这种架构增加了业务系统复杂度使得业务系统过重，系统和系统之间架构职责不清晰</li><li>扩展性差，依赖各业务系统各自完成召回动作，而商品召回本身并不是一个简单动作，需要完成召回-过滤-融合等一系列动作。除此以外，数据源的新增变更、数据结构的变化带来的适配工作也是一个让人头疼的问题</li><li>召回配置难，这一点是对算法同学而言的，原有架构缺少一个统一的召回配置平台，AB 实验的进行和验证受到影响，妨碍算法迭代效率提升</li><li>稳定性难保障，对平台开发同学而言，日常需要监控依赖数据源、召回的各个阶段，如数据源平均 rt，各阶段平均 rt、超时率，召回整体的兜底率等指标，业务系统越多越不利于监控，系统的稳定性也会大打折扣</li></ul><h3 id="召回系统设计"><a href="#召回系统设计" class="headerlink" title="召回系统设计"></a>召回系统设计</h3><p>基于如上所述的诸多缺点，我们着手完成了推荐召回的服务切分，使得触达、首页推荐、购后等多个场景的推荐业务召回部分能够得到统一</p><h4 id="主体设计"><a href="#主体设计" class="headerlink" title="主体设计"></a>主体设计</h4><p>一般来说，整个召回阶段主要完成多路召回-过滤-去重-融合几个步骤，大致的作用如下</p><ol><li>多路召回，根据配置采用不同的召回策略从不同的数据源中获取物料，原则上多路召回尽可能多的返回用户可能有兴趣的物料，通常会根据每路召回的后验表现来设置配比。</li><li>去重，这一步主要是针对每一路召回而言，通常只是简单的根据商品 id 或者一些简单属性去重，避免因为数据源清洗问题导致的重复曝光。</li><li>过滤，通常会存在一些不同的过滤规则，如用户维度的曝光过滤、点击过滤、购买过滤等，也可能是基于风控规则的过滤，如卖家作弊等处罚、黄图恶心图等过滤。</li><li>融合，多路召回的物料根据需要进行合并，截断选取若干物料进入下一阶段，可以按照召回策略优先级融合，也可以是多路召回投票融合，也可以是通过物料的指标权重融合。</li></ol><p>针对上述召回系统的几个步骤和特性，我们设计了如下的系统架构，整个召回系统大体上可以分为三层，召回配置层、召回引擎层、数据依赖层。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.nlark.com/yuque/0/2022/png/21378486/1663577306023-68deca3d-a3c5-48a4-9fd7-6b325cf46c7f.png#clientId=uf8dc1a4a-4d79-4&errorMessage=unknown%20error&from=paste&height=428&id=ub055a9f0&name=image.png&originHeight=856&originWidth=1404&originalType=binary∶=1&rotation=0&showTitle=false&size=140359&status=error&style=none&taskId=u8f1b9855-4135-423d-956a-da6c52699d9&title=&width=702" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>召回配置层</li></ul><p>召回配置层主要面向算法同学，旨在让算法同学方便快捷地进行召回层配置进行 AB 实验和后续的结果验证，在实现上，主要借助 Disconf 作为配置中心，在引擎层做 AB 分流、召回配置解析等前置操作。</p><ul><li>召回引擎层</li></ul><p>召回引擎层采用模块化设计，通过召回配置实现模块和任务节点的动态化编排，同时通过插件化思想提供了异构数据源的支持，大大降低了新增数据源的成本。在稳定性保障上，由于采用了模块-任务节点的设计，能够很好地实现多维度的监控，如场景-模块维度的 rt 监控、失败率监控，场景-任务节点维度的超时率监控，场景维度的兜底率、无结果率监控等，同时配合钉钉告警实现问题的早发现早止血。</p><ul><li>召回存储层</li></ul><p>召回存储层主要面向异构数据源设计，前面提到因为历史原因现有的召回数据源结构和存储介质都存在差异以满足不同业务系统的诉求，因此在改造召回系统的过程中需要充分考虑数据存储的问题，如首页推荐等场景召回数据结构相对简单，需要满足低延迟诉求所以一直以来优先考虑 Redis, 又如触达算法召回数据结构复杂，包含属性多，数据量大用 MySQL 或者 MongoDB 更合适些，又如后续业务可能存在向量召回的场景，使用 ElasticSearch 或者调用 faiss 服务更合适，因此必须要考虑异构数据源的接入便捷性。</p><h4 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h4><p>这一节主要介绍下召回引擎部分的一些实现细节以及踩过的一些坑，整个召回召回引擎调度如下图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.nlark.com/yuque/0/2022/png/21378486/1663604893265-445d2e42-3c84-493c-ad81-0fa1c48aa931.png#clientId=uf9e1d712-c452-4&errorMessage=unknown%20error&from=paste&height=508&id=u97dbafdc&name=image.png&originHeight=1016&originWidth=1284&originalType=binary∶=1&rotation=0&showTitle=false&size=190882&status=error&style=none&taskId=u1c05f6db-6317-4f29-8729-4593f561367&title=&width=642" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>模块化设计</li></ul><p>如上述，整个召回过程中大体经过了多路召回-去重-过滤-融合等步骤。在设计上可以将各个步骤封装成独立的模块(module)，AB 分流获取门店对应的召回配置后，根据配置编排所需要的模块完成调度。而模块和模块之间又可能存在依赖关系，如在召回系统中各模块之间是串行的，而在一些系统中存在模块并发执行的需求，所以在设计之初设计了如下结构来做兼容，简单来说同一个列表内多个模块并发执行，不同列表的模块串行执行。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.nlark.com/yuque/0/2022/png/21378486/1663581291857-2e0bdd2c-2c05-4add-a7a7-a0555a278edc.png#clientId=uf8dc1a4a-4d79-4&errorMessage=unknown%20error&from=paste&height=129&id=u38d3a353&name=image.png&originHeight=258&originWidth=1120&originalType=binary∶=1&rotation=0&showTitle=false&size=37125&status=error&style=none&taskId=uf0ed5a22-4124-464a-a45f-beb74256d03&title=&width=560" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>在模块内，抽象出任务节点(TaskNode)，如在多路召回模块中，每一路召回相当于一个任务节点，彼此并发执行，又比如在过滤模块中，每一种过滤策略可以当做一个任务节点获取待过滤数据。通过任务节点并发的方式可以有效降低 RT,相较于之前串行召回的方式平均减少 RT 约 16%。如下代码大致演示了模块内任务节点执行的实现。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.nlark.com/yuque/0/2022/png/21378486/1663581881117-a0f9fab6-a743-4a3a-bec5-ffdf0b2b1573.png#clientId=uf9e1d712-c452-4&errorMessage=unknown%20error&from=paste&height=164&id=uff5be3d6&name=image.png&originHeight=328&originWidth=574&originalType=binary∶=1&rotation=0&showTitle=false&size=48265&status=error&style=none&taskId=uafabf29a-09a3-4f34-9eaf-5aa5b87ff9e&title=&width=287" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模块执行只需要执行任务列表中的任务即可</span></span><br><span class="line"><span class="comment"> * 任务列表中的任务先暂时都并发执行 后面可以支持并发和顺序两种模式</span></span><br><span class="line"><span class="comment"> * 即 [[A,B],[C]] A、B并发执行完成后再执行C</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> requestContext 召回请求上下文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> recallModuleResultDto 召回模块结果对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModuleResult <span class="title">invoke</span><span class="params">(RequestContext requestContext)</span> </span>&#123;</span><br><span class="line">    RecallStrategyConfig recallStrategyConfig = requestContext.getRecallStrategyConfig();</span><br><span class="line">    <span class="keyword">if</span> (recallStrategyConfig == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ModuleResult moduleResult = <span class="keyword">new</span> ModuleResult();</span><br><span class="line">    moduleResult.setTaskResultList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(<span class="keyword">this</span>.taskList)) &#123;</span><br><span class="line">        <span class="keyword">return</span> moduleResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并发执行任务列表中的任务 使用arrayList保留任务原始的顺序</span></span><br><span class="line">    List&lt;Tuple&lt;TaskNode, CompletableFuture&lt;TaskResult&gt;&gt;&gt; tupleList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (TaskNode taskNode : taskList) &#123;</span><br><span class="line">        CompletableFuture&lt;TaskResult&gt; future = CompletableFuture.supplyAsync(() -&gt;</span><br><span class="line">                taskNode.invoke(requestContext), ThreadUtil.executor);</span><br><span class="line">        tupleList.add(<span class="keyword">new</span> Tuple&lt;&gt;(taskNode, future));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果获取 省略...</span></span><br><span class="line">    <span class="keyword">return</span> moduleResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模块内多个任务节点并发执行有一些需要关注的点，在实现中可能需要特别关注。</p><ol><li>任务节点超时处理， 首先任务节点必须配置超时时间，避免因为某一个任务节点引起的服务雪崩，其次不同的任务节点其超时时间可以根据经验做配置化，如多路召回中 MongoDB 和 Redis 的超时时间可以根据监控做动态化调整，再比如对于无执行先后顺序要求的任务节点可以适当调整获取结果顺序以避免空结果等。</li><li>召回结果在不同阶段的传递，在目前的召回引擎实现中采用了上下文的方式传递召回中间结果，上下文中会保存不同阶段的模块结果(其中包含各阶段的召回结果)，保存不同阶段召回结果即每个阶段召回结果均为深拷贝以避免对上一个模块结果的破坏。</li><li>空结果处理， 在实际运行中可能存在各种情况导致召回结果为空，此时需要进行服务端兜底召回，除此以外当常规召回数量不够也需要使用兜底数据补召回，兜底召回数据请求实际也需要权衡，目前的实现中把兜底召回作为一路召回在多路并发召回阶段执行，通过多一次 IO 来降低服务的总 RT(兜底召回不一定被使用)</li></ol><ul><li>异构数据源支持</li></ul><p>召回引擎提供了对多种数据源的支持，目前已支持如 Redis、MySQL、MongoDB、RPC 等多种数据源。以触达算法召回为例，数据量大且字段属性多，非常适合以 MongoDB 作为存储数据源，而首页推荐、购后推荐等场景的召回数据大多结构简单且要求召回速度快，因此以 Redis 作为存储数据源更合适。<br>常规的单路召回需要经过获取数据-去重-截断-类型转换等步骤，其中获取数据和类型转换需要根据数据源类型做适配，因此在设计之初采用插件的方式支持异构数据源，只要实现几个简单方法就可以完成数据源的新增，如下代码大致展示了数据源插件的抽象定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRecaller</span>&lt;<span class="title">OriginType</span>, <span class="title">ResultType</span>&gt; <span class="keyword">implements</span> <span class="title">Recaller</span>&lt;<span class="title">OriginType</span>, <span class="title">ResultType</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//部分代码省略</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultType <span class="title">recall</span><span class="params">(RequestContext requestContext, RecallSourceConfig recallSourceConfig)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取数据源数据</span></span><br><span class="line">        OriginType originData = fetch(requestContext, recallSourceConfig);</span><br><span class="line">        <span class="comment">// 去重</span></span><br><span class="line">        originData = distinct(originData);</span><br><span class="line">        <span class="comment">// 截断</span></span><br><span class="line">        originData = cut(originData, recallSourceConfig.getLen());</span><br><span class="line">        <span class="comment">// 转换</span></span><br><span class="line">        ResultType result = convert(originData, recallSourceConfig);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以一个实际的单路召回为例，召回策略配置如下，表示该路召回策略存储数据源为 MongoDB，召回类型为 s2i，召回的主键标识为 act<em>new_sign</em>,同时需要返回对应文档的指定字段</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mongo_act_new_sign:</span><br><span class="line">  dataSource: mongo</span><br><span class="line">  fields: itemId,shopId,feature,rankNum,orderedDays</span><br><span class="line">  key: act_new_sign_</span><br><span class="line">  type: recall_s2i</span><br></pre></td></tr></table></figure><p>在运行的过程中召回引擎先会根据召回类型、绑定的数据源元信息等匹配对应的召回器 Recaller, 召回器的注册使用自定义注解@AiRecaller 完成，如下代码即为以 MongoDB 作为数据源的接入方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AiRecaller</span>(</span><br><span class="line">        name = <span class="string">"touchMongoRecaller"</span>,</span><br><span class="line">        dataSourceType = RecallDataSourceType.mongo, recallTypes = &#123;RecallType.recall_s2i&#125;,</span><br><span class="line">        dbName = <span class="string">"ai_recall"</span>, tableName = <span class="string">"ai_touch"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TouchMongoRecaller</span> <span class="keyword">extends</span> <span class="title">AbstractRecaller</span>&lt;<span class="title">List</span>&lt;<span class="title">TouchRecallDo</span>&gt;, <span class="title">TriggerResult</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TouchRecallDo&gt; <span class="title">fetch</span><span class="params">(RequestContext requestContext, RecallSourceConfig recallSourceConfig)</span> </span>&#123;</span><br><span class="line">        String sceneId = requestContext.getRecallReq().getSceneId();</span><br><span class="line">        String recallKey = recallSourceConfig.getKey();</span><br><span class="line">        String shopId = requestContext.getRecallReq().getShopId();</span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        List&lt;TouchRecallDo&gt; touchRecallDos = <span class="keyword">null</span>;</span><br><span class="line">        Query query = <span class="keyword">new</span> Query();</span><br><span class="line">        <span class="comment">// TODO 这边可以结合管理后台实现查询条件的配置化</span></span><br><span class="line">        query.addCriteria(Criteria.where(<span class="string">"shop_id"</span>).is(shopId))</span><br><span class="line">                .addCriteria(Criteria.where(<span class="string">"recall_key"</span>).is(recallKey))</span><br><span class="line">                .with(Sort.by(Sort.Order.asc(<span class="string">"rank_num"</span>)));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            touchRecallDos = mongoTemplate.find(query, TouchRecallDo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"[TouchMongoRecaller-fetch] sceneId:&#123;&#125; recallKey:&#123;&#125; shopId:&#123;&#125; exception cause:"</span>,</span><br><span class="line">                    sceneId, recallKey, shopId, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> touchRecallDos;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>需要说明的是目前召回引擎多以离线方式计算落库，实时召回也多以用户实时 Query 等作为 trigger，但现有的召回系统架构可以快速支持如基于向量的实时召回等方式，这也是后续召回引擎一个迭代的方向。</p><h2 id="总结和展望"><a href="#总结和展望" class="headerlink" title="总结和展望"></a>总结和展望</h2><p>如上文提及，目前算法侧的召回数据均以离线方式产出落库，因此对实时特征的利用相对不足。后续召回引擎可以结合特征平台建设，尝试基于 ElasticSearch 或者 Faiss 的在线检索召回服务。</p><h2 id="文献引用"><a href="#文献引用" class="headerlink" title="文献引用"></a>文献引用</h2><p><a href="https://zhuanlan.zhihu.com/p/100019681" target="_blank" rel="noopener">推荐系统技术演进趋势：从召回到排序再到重排</a><br><a href="https://zhuanlan.zhihu.com/p/358779957" target="_blank" rel="noopener">SENet 双塔模型：在推荐领域召回粗排的应用及其它</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;推荐系统通常可以分为召回、粗排、精排、重排四个阶段，召回主要是根据不同策略或模型从海量的物品库中快速筛选出一小部分用户可能感兴趣的物品，交由</summary>
      
    
    
    
    <category term="推荐系统" scheme="https://xiaoysec.github.io/categories/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="推荐系统" scheme="https://xiaoysec.github.io/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="系统设计" scheme="https://xiaoysec.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="召回" scheme="https://xiaoysec.github.io/tags/%E5%8F%AC%E5%9B%9E/"/>
    
  </entry>
  
  <entry>
    <title>Slf4j源码浅析</title>
    <link href="https://xiaoysec.github.io/2019/05/31/Slf4j%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/"/>
    <id>https://xiaoysec.github.io/2019/05/31/Slf4j%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</id>
    <published>2019-05-30T17:03:50.000Z</published>
    <updated>2023-02-20T05:59:34.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>在项目中引入一个二方包后在后台日志诡异的不见了，于是使用</p><pre><code>mvn dependency:tree -l tree.txt</code></pre><p>输出依赖关系树，并定位到新引入的二方包部分,二方包引入了spring-boot-starter-logging其依赖了logback-classic与项目中的log4j产生了冲突，所以将前者排掉就项目就可以正常启动了，这个排包的过程不算难，那slf4j是如何实现绑定的呢？</p><a id="more"></a><h3 id="slf4j源码浅析"><a href="#slf4j源码浅析" class="headerlink" title="slf4j源码浅析"></a>slf4j源码浅析</h3><p>这里使用到的slf4j-api版本是<code>1.7.25</code>，在老版本中是存在一些线程安全问题的，通常我们打日志的时候都会写一段这样的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(XXX<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure><ol><li><p>我们从LoggerFactory这个类开始分析源码,首先看到<code>getLogger</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title">getLogger</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    Logger logger = getLogger(clazz.getName());</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title">getLogger</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    ILoggerFactory iLoggerFactory = getILoggerFactory();</span><br><span class="line">    <span class="keyword">return</span> iLoggerFactory.getLogger(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面源码可以看到会调用<code>getLogger(String name)</code>这个方法，通过LoggerFactory最终获取Logger对象，<br>所以重点就是获取LoggerFactory. </p></li><li><p>我们重点看下 <code>getILoggerFactory</code>这个方法</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ILoggerFactory <span class="title">getILoggerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (INITIALIZATION_STATE == UNINITIALIZED) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (LoggerFactory<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (INITIALIZATION_STATE == UNINITIALIZED) &#123;</span><br><span class="line">                INITIALIZATION_STATE = ONGOING_INITIALIZATION;</span><br><span class="line">                performInitialization();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (INITIALIZATION_STATE) &#123;</span><br><span class="line">    <span class="keyword">case</span> SUCCESSFUL_INITIALIZATION:</span><br><span class="line">        <span class="keyword">return</span> StaticLoggerBinder.getSingleton().getLoggerFactory();</span><br><span class="line">    <span class="keyword">case</span> NOP_FALLBACK_INITIALIZATION:</span><br><span class="line">        <span class="keyword">return</span> NOP_FALLBACK_FACTORY;</span><br><span class="line">    <span class="keyword">case</span> FAILED_INITIALIZATION:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(UNSUCCESSFUL_INIT_MSG);</span><br><span class="line">    <span class="keyword">case</span> ONGOING_INITIALIZATION:</span><br><span class="line">        <span class="comment">// support re-entrant behavior.</span></span><br><span class="line">        <span class="comment">// See also http://jira.qos.ch/browse/SLF4J-97</span></span><br><span class="line">        <span class="keyword">return</span> SUBST_FACTORY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unreachable code"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 从源码中可以看到<code>INITIALIZATION_STATE</code>是一个静态的volatile变量，在之前的版本中没有volatile修饰，在这个方法中主要就是调用了<code>performInitialization</code>方法完成初始化,在该方法中主要完成绑定工作并进行检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">performInitialization</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       bind();</span><br><span class="line">       <span class="keyword">if</span> (INITIALIZATION_STATE == SUCCESSFUL_INITIALIZATION) &#123;</span><br><span class="line">           versionSanityCheck();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Set&lt;URL&gt; staticLoggerBinderPathSet = <span class="keyword">null</span>;</span><br><span class="line">           <span class="keyword">if</span> (!isAndroid()) &#123;</span><br><span class="line">               staticLoggerBinderPathSet = findPossibleStaticLoggerBinderPathSet();</span><br><span class="line">               reportMultipleBindingAmbiguity(staticLoggerBinderPathSet);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// the next line does the binding</span></span><br><span class="line">           StaticLoggerBinder.getSingleton();</span><br><span class="line">           INITIALIZATION_STATE = SUCCESSFUL_INITIALIZATION;</span><br><span class="line">           reportActualBinding(staticLoggerBinderPathSet);</span><br><span class="line">           fixSubstituteLoggers();</span><br><span class="line">           replayEvents();</span><br><span class="line">           <span class="comment">// release all resources in SUBST_FACTORY</span></span><br><span class="line">           SUBST_FACTORY.clear();</span><br><span class="line">       &#125; </span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><p>其中有个重要的方法<code>findPossibleStaticLoggerBinderPathSet</code> 顾名思义就是找可能存在的StaticLoggerBinder路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String STATIC_LOGGER_BINDER_PATH = <span class="string">"org/slf4j/impl/StaticLoggerBinder.class"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Set&lt;URL&gt; <span class="title">findPossibleStaticLoggerBinderPathSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// use Set instead of list in order to deal with bug #138</span></span><br><span class="line">        <span class="comment">// LinkedHashSet appropriate here because it preserves insertion order</span></span><br><span class="line">        <span class="comment">// during iteration</span></span><br><span class="line">        Set&lt;URL&gt; staticLoggerBinderPathSet = <span class="keyword">new</span> LinkedHashSet&lt;URL&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClassLoader loggerFactoryClassLoader = LoggerFactory<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">            Enumeration&lt;URL&gt; paths;</span><br><span class="line">            <span class="keyword">if</span> (loggerFactoryClassLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">                paths = ClassLoader.getSystemResources(STATIC_LOGGER_BINDER_PATH);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                paths = loggerFactoryClassLoader.getResources(STATIC_LOGGER_BINDER_PATH);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (paths.hasMoreElements()) &#123;</span><br><span class="line">                URL path = paths.nextElement();</span><br><span class="line">                staticLoggerBinderPathSet.add(path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> staticLoggerBinderPathSet;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其实就是找日志实现包中的的StaticLoggerBinder，如slf4j-log4j12中的，将这些类的类路径添加到上面的set中，接着通过<code>reportMultipleBindingAmbiguity</code>方法检查是不是存在多个日志实现绑定产生冲突, 即看一下binderPathSet中元素个数是不是大于1，很简单，因此当项目中logback和slf4j-log4j同时存在时会打印出多个”Found binding in …”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAmbiguousStaticLoggerBinderPathSet</span><span class="params">(Set&lt;URL&gt; binderPathSet)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> binderPathSet.size() &gt; <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reportMultipleBindingAmbiguity</span><span class="params">(Set&lt;URL&gt; binderPathSet)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (isAmbiguousStaticLoggerBinderPathSet(binderPathSet)) &#123;</span><br><span class="line">           Util.report(<span class="string">"Class path contains multiple SLF4J bindings."</span>);</span><br><span class="line">           <span class="keyword">for</span> (URL path : binderPathSet) &#123;</span><br><span class="line">               Util.report(<span class="string">"Found binding in ["</span> + path + <span class="string">"]"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           Util.report(<span class="string">"See "</span> + MULTIPLE_BINDINGS_URL + <span class="string">" for an explanation."</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>回到<code>bind</code>方法，看到<code>StaticLoggerBinder.getSingleton();</code>，其实就是创建一个单例的StaticLoggerBinder对象，而这个对象中含有一个LoggerFactory，针对不同的日志框架有不同的实现</p><ul><li>log4j<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ILoggerFactory loggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">StaticLoggerBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  loggerFactory = <span class="keyword">new</span> Log4jLoggerFactory();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Level level = Level.TRACE;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (NoSuchFieldError nsfe) &#123;</span><br><span class="line">    Util</span><br><span class="line">        .report(<span class="string">"This version of SLF4J requires log4j version 1.2.12 or later. See also http://www.slf4j.org/codes.html#log4j_version"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>logback-classic<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> initialized = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> LoggerContext defaultLoggerContext = <span class="keyword">new</span> LoggerContext();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ContextSelectorStaticBinder contextSelectorBinder = ContextSelectorStaticBinder.getSingleton();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">StaticLoggerBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    defaultLoggerContext.setName(CoreConstants.DEFAULT_CONTEXT_NAME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>通过这种绑定的方式就可以实现LoggerFactory的获取，如引入了log4j，就会利用log4j实现的<code>StaticLoggerBinder</code>类来获取log4j的LoggerFactory,而LoggerFactory可以简单地理解为一个Map，key为loggerName,value为Logger对象</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题复现&quot;&gt;&lt;a href=&quot;#问题复现&quot; class=&quot;headerlink&quot; title=&quot;问题复现&quot;&gt;&lt;/a&gt;问题复现&lt;/h3&gt;&lt;p&gt;在项目中引入一个二方包后在后台日志诡异的不见了，于是使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mvn dependency:tree -l tree.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出依赖关系树，并定位到新引入的二方包部分,二方包引入了spring-boot-starter-logging其依赖了logback-classic与项目中的log4j产生了冲突，所以将前者排掉就项目就可以正常启动了，这个排包的过程不算难，那slf4j是如何实现绑定的呢？&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://xiaoysec.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://xiaoysec.github.io/tags/Java/"/>
    
    <category term="slf4j" scheme="https://xiaoysec.github.io/tags/slf4j/"/>
    
  </entry>
  
</feed>
