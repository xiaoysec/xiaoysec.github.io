<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>西土城马戏团</title>
  <icon>https://www.gravatar.com/avatar/cdcac963e087f7ecf2e4d43707a2fbd4</icon>
  <subtitle>Keep Listening Keep Thinking</subtitle>
  <link href="https://xiaoysec.github.io/atom.xml" rel="self"/>
  
  <link href="https://xiaoysec.github.io/"/>
  <updated>2023-02-16T02:34:05.806Z</updated>
  <id>https://xiaoysec.github.io/</id>
  
  <author>
    <name>xiaoysec</name>
    <email>xiaoysec@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xiaoysec.github.io/2023/02/16/hello-world/"/>
    <id>https://xiaoysec.github.io/2023/02/16/hello-world/</id>
    <published>2023-02-16T02:34:05.806Z</published>
    <updated>2023-02-16T02:34:05.806Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Slf4j源码浅析</title>
    <link href="https://xiaoysec.github.io/2019/05/31/Slf4j%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/"/>
    <id>https://xiaoysec.github.io/2019/05/31/Slf4j%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</id>
    <published>2019-05-30T17:03:50.000Z</published>
    <updated>2019-05-30T17:10:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>在项目中引入一个二方包后在后台日志诡异的不见了，于是使用</p><pre><code>mvn dependency:tree -l tree.txt</code></pre><p>输出依赖关系树，并定位到新引入的二方包部分,二方包引入了spring-boot-starter-logging其依赖了logback-classic与项目中的log4j产生了冲突，所以将前者排掉就项目就可以正常启动了，这个排包的过程不算难，那slf4j是如何实现绑定的呢？</p><a id="more"></a><h3 id="slf4j源码浅析"><a href="#slf4j源码浅析" class="headerlink" title="slf4j源码浅析"></a>slf4j源码浅析</h3><p>这里使用到的slf4j-api版本是<code>1.7.25</code>，在老版本中是存在一些线程安全问题的，通常我们打日志的时候都会写一段这样的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(XXX<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure><ol><li><p>我们从LoggerFactory这个类开始分析源码,首先看到<code>getLogger</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title">getLogger</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    Logger logger = getLogger(clazz.getName());</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title">getLogger</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    ILoggerFactory iLoggerFactory = getILoggerFactory();</span><br><span class="line">    <span class="keyword">return</span> iLoggerFactory.getLogger(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面源码可以看到会调用<code>getLogger(String name)</code>这个方法，通过LoggerFactory最终获取Logger对象，<br>所以重点就是获取LoggerFactory. </p></li><li><p>我们重点看下 <code>getILoggerFactory</code>这个方法</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ILoggerFactory <span class="title">getILoggerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (INITIALIZATION_STATE == UNINITIALIZED) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (LoggerFactory<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (INITIALIZATION_STATE == UNINITIALIZED) &#123;</span><br><span class="line">                INITIALIZATION_STATE = ONGOING_INITIALIZATION;</span><br><span class="line">                performInitialization();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (INITIALIZATION_STATE) &#123;</span><br><span class="line">    <span class="keyword">case</span> SUCCESSFUL_INITIALIZATION:</span><br><span class="line">        <span class="keyword">return</span> StaticLoggerBinder.getSingleton().getLoggerFactory();</span><br><span class="line">    <span class="keyword">case</span> NOP_FALLBACK_INITIALIZATION:</span><br><span class="line">        <span class="keyword">return</span> NOP_FALLBACK_FACTORY;</span><br><span class="line">    <span class="keyword">case</span> FAILED_INITIALIZATION:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(UNSUCCESSFUL_INIT_MSG);</span><br><span class="line">    <span class="keyword">case</span> ONGOING_INITIALIZATION:</span><br><span class="line">        <span class="comment">// support re-entrant behavior.</span></span><br><span class="line">        <span class="comment">// See also http://jira.qos.ch/browse/SLF4J-97</span></span><br><span class="line">        <span class="keyword">return</span> SUBST_FACTORY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unreachable code"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 从源码中可以看到<code>INITIALIZATION_STATE</code>是一个静态的volatile变量，在之前的版本中没有volatile修饰，在这个方法中主要就是调用了<code>performInitialization</code>方法完成初始化,在该方法中主要完成绑定工作并进行检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">performInitialization</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       bind();</span><br><span class="line">       <span class="keyword">if</span> (INITIALIZATION_STATE == SUCCESSFUL_INITIALIZATION) &#123;</span><br><span class="line">           versionSanityCheck();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Set&lt;URL&gt; staticLoggerBinderPathSet = <span class="keyword">null</span>;</span><br><span class="line">           <span class="keyword">if</span> (!isAndroid()) &#123;</span><br><span class="line">               staticLoggerBinderPathSet = findPossibleStaticLoggerBinderPathSet();</span><br><span class="line">               reportMultipleBindingAmbiguity(staticLoggerBinderPathSet);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// the next line does the binding</span></span><br><span class="line">           StaticLoggerBinder.getSingleton();</span><br><span class="line">           INITIALIZATION_STATE = SUCCESSFUL_INITIALIZATION;</span><br><span class="line">           reportActualBinding(staticLoggerBinderPathSet);</span><br><span class="line">           fixSubstituteLoggers();</span><br><span class="line">           replayEvents();</span><br><span class="line">           <span class="comment">// release all resources in SUBST_FACTORY</span></span><br><span class="line">           SUBST_FACTORY.clear();</span><br><span class="line">       &#125; </span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><p>其中有个重要的方法<code>findPossibleStaticLoggerBinderPathSet</code> 顾名思义就是找可能存在的StaticLoggerBinder路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String STATIC_LOGGER_BINDER_PATH = <span class="string">"org/slf4j/impl/StaticLoggerBinder.class"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Set&lt;URL&gt; <span class="title">findPossibleStaticLoggerBinderPathSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// use Set instead of list in order to deal with bug #138</span></span><br><span class="line">        <span class="comment">// LinkedHashSet appropriate here because it preserves insertion order</span></span><br><span class="line">        <span class="comment">// during iteration</span></span><br><span class="line">        Set&lt;URL&gt; staticLoggerBinderPathSet = <span class="keyword">new</span> LinkedHashSet&lt;URL&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClassLoader loggerFactoryClassLoader = LoggerFactory<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">            Enumeration&lt;URL&gt; paths;</span><br><span class="line">            <span class="keyword">if</span> (loggerFactoryClassLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">                paths = ClassLoader.getSystemResources(STATIC_LOGGER_BINDER_PATH);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                paths = loggerFactoryClassLoader.getResources(STATIC_LOGGER_BINDER_PATH);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (paths.hasMoreElements()) &#123;</span><br><span class="line">                URL path = paths.nextElement();</span><br><span class="line">                staticLoggerBinderPathSet.add(path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> staticLoggerBinderPathSet;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其实就是找日志实现包中的的StaticLoggerBinder，如slf4j-log4j12中的，将这些类的类路径添加到上面的set中，接着通过<code>reportMultipleBindingAmbiguity</code>方法检查是不是存在多个日志实现绑定产生冲突, 即看一下binderPathSet中元素个数是不是大于1，很简单，因此当项目中logback和slf4j-log4j同时存在时会打印出多个”Found binding in …”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAmbiguousStaticLoggerBinderPathSet</span><span class="params">(Set&lt;URL&gt; binderPathSet)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> binderPathSet.size() &gt; <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reportMultipleBindingAmbiguity</span><span class="params">(Set&lt;URL&gt; binderPathSet)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (isAmbiguousStaticLoggerBinderPathSet(binderPathSet)) &#123;</span><br><span class="line">           Util.report(<span class="string">"Class path contains multiple SLF4J bindings."</span>);</span><br><span class="line">           <span class="keyword">for</span> (URL path : binderPathSet) &#123;</span><br><span class="line">               Util.report(<span class="string">"Found binding in ["</span> + path + <span class="string">"]"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           Util.report(<span class="string">"See "</span> + MULTIPLE_BINDINGS_URL + <span class="string">" for an explanation."</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>回到<code>bind</code>方法，看到<code>StaticLoggerBinder.getSingleton();</code>，其实就是创建一个单例的StaticLoggerBinder对象，而这个对象中含有一个LoggerFactory，针对不同的日志框架有不同的实现</p><ul><li>log4j<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ILoggerFactory loggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">StaticLoggerBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  loggerFactory = <span class="keyword">new</span> Log4jLoggerFactory();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Level level = Level.TRACE;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (NoSuchFieldError nsfe) &#123;</span><br><span class="line">    Util</span><br><span class="line">        .report(<span class="string">"This version of SLF4J requires log4j version 1.2.12 or later. See also http://www.slf4j.org/codes.html#log4j_version"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>logback-classic<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> initialized = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> LoggerContext defaultLoggerContext = <span class="keyword">new</span> LoggerContext();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ContextSelectorStaticBinder contextSelectorBinder = ContextSelectorStaticBinder.getSingleton();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">StaticLoggerBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    defaultLoggerContext.setName(CoreConstants.DEFAULT_CONTEXT_NAME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>通过这种绑定的方式就可以实现LoggerFactory的获取，如引入了log4j，就会利用log4j实现的<code>StaticLoggerBinder</code>类来获取log4j的LoggerFactory,而LoggerFactory可以简单地理解为一个Map，key为loggerName,value为Logger对象</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题复现&quot;&gt;&lt;a href=&quot;#问题复现&quot; class=&quot;headerlink&quot; title=&quot;问题复现&quot;&gt;&lt;/a&gt;问题复现&lt;/h3&gt;&lt;p&gt;在项目中引入一个二方包后在后台日志诡异的不见了，于是使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mvn dependency:tree -l tree.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出依赖关系树，并定位到新引入的二方包部分,二方包引入了spring-boot-starter-logging其依赖了logback-classic与项目中的log4j产生了冲突，所以将前者排掉就项目就可以正常启动了，这个排包的过程不算难，那slf4j是如何实现绑定的呢？&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://xiaoysec.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://xiaoysec.github.io/tags/Java/"/>
    
    <category term="slf4j" scheme="https://xiaoysec.github.io/tags/slf4j/"/>
    
  </entry>
  
</feed>
